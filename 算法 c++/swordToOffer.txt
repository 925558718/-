
1.在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
bool Find(int target, vector<vector<int> > array) {
    if(array.empty()||array[0].empty()) return false;
    int coloumn=array[0].size()-1;
    int row=array.size()-1;
    int x=row,y=0;
    while(x>=0&&y<=coloumn){
        if(array[x][y]==target) return true;
        else if (array[x][y]<target) y++;
        else if (array[x][y]>target) x--;
    }
    return false;
}
2.请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
void replaceSpace(char *str,int length) {
        int l1=length-1;
        for(auto i:str){
            if(i==' '){
                str.append("  ");
            }
        }
        int l2=str.size()-1;
        while(l2>=0&&l2>l1){
            char c=str[l1--];
            if(c==' '){
                str[l2--]='0';
                str[l2--]='2';
                str[l2--]='%';
            }else{
                str[l2--]=c;
            }
        }
	}


3输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
第一种
vector<int> printListFromTailToHead(ListNode* head) {
        vector<int> res;
        printListFromTailToHead(head,res);
        return res;
    }
    void printListFromTailToHead(ListNode* head,vector<int> &res){
        if(!head) return;
        printListFromTailToHead(head->next,res);
        res.push_back(head->val);
    }
第二种
vector<int> printListFromTailToHead(ListNode* head) {
        stack<int> s;
        vector<int> res;
        while(head){
            s.push(head->val);
            head=head->next;
        }
        while(!s.empty()){
            res.push_back(s.top());
            s.pop();
        }
        return res;
    }

4.输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        return help(pre,0,pre.size()-1,vin,0,vin.size()-1);
    }
    TreeNode* help(vector<int> &pre,int pl,int pr,vector<int> &vin,int vl,int vr){
        if(pl>pr||vl>vr) return NULL;
        int i=0;
        for(i=vl;i<=vr;i++){
            if(pre[pl]==vin[i]) break;
        }
        TreeNode *t=new TreeNode(pre[pl]);
        t->left=help(pre,pl+1,i-vl+pl,vin,vl,i-1);
        t->right=help(pre,pl+i-vl+1,pr,vin,i+1,vr);
        return t;
    }

5.用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
public:
    void push(int node) {
        stack1.push(node);
    }

    int pop() {
        if(stack2.empty()){
        while(!stack1.empty()){
            stack2.push(stack1.top());
            stack1.pop();
        }
        }
        int res=stack2.top();
        stack2.pop();
        return res;
    }

private:
    stack<int> stack1;
    stack<int> stack2;
};

6.把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
int minNumberInRotateArray(vector<int> rotateArray) {
        if(rotateArray.empty()) return 0;
        int left=0,right=rotateArray.size()-1;
        while(left<right){
            if(rotateArray[left]<rotateArray[right]) return rotateArray[left];
            int mid=left+(right-left)/2;
            if(rotateArray[left]<rotateArray[mid]) left=mid+1;
            else if(rotateArray[mid]<rotateArray[right]) right=mid;
            else left++;
        }
        return rotateArray[left];
    }
7.大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。
  n<=39
  int Fibonacci(int n) {
          int num[39];
          num[0]=0;
          num[1]=1;
          num[2]=1;
          for(int i=3;i<=n;i++){
              num[i]=num[i-1]+num[i-2];
          }
          return num[n];
      }
8.一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法
int jumpFloorII(int number) {
        int count = 0;

        if(number == 0)
            return 1;

        for(int i =1; i<=number;++i){
            count += jumpFloorII(number-i);
        }

        return count;
    }
9.输入一个链表，输出该链表中倒数第k个结点
ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {
        if (!pListHead||k==0) return NULL;
        ListNode *pre = pListHead, *cur = pListHead;
        for (int i = 0; i < k-1; ++i) cur = cur->next;
        if (!cur) return NULL;
        while (cur->next) {
            cur = cur->next;
            pre = pre->next;
        }
        return pre;
    }
10.输入一个链表，反转链表后，输出新链表的表头。
if(!pHead||!pHead->next) return pHead;
        ListNode *t=ReverseList(pHead->next);
        pHead->next->next=pHead;
        pHead->next=NULL;
        return t;

第二种
ListNode* ReverseList(ListNode* pHead) {
        if(!pHead) return NULL;
        ListNode *pre=NULL;
        while(pHead){
            ListNode *cur=pHead->next;
            pHead->next=pre;
            pre=pHead;
            pHead=cur;
        }
        return pre;
    }
11.输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        ListNode *hummy=new ListNode(-1);
        ListNode *head=hummy;
        while(pHead1&&pHead2){
            if(pHead1->val<pHead2->val){
                head->next=pHead1;
                pHead1=pHead1->next;
            }else{
                head->next=pHead2;
                pHead2=pHead2->next;
            }
            head=head->next;
        }
        head->next=pHead1?pHead1:pHead2;
        return hummy->next;
    }
12.输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(!pRoot1) return false;
        if(same(pRoot1,pRoot2)) return true;
        return same(pRoot1->left,pRoot2)||same(pRoot1->right,pRoot2);
    }
    bool same(TreeNode* l, TreeNode* r){
        if(!l&&!r) return true;
        if((!l&&r)||(l&&!r)||(l->val!=r->val)) return false;
        return same(l->left,r->left)&&same(l->right,r->right);
    }
13.操作给定的二叉树，将其变换为源二叉树的镜像。
void Mirror(TreeNode *pRoot) {
        if(!pRoot) return;
        TreeNode *temp=pRoot->left;
        pRoot->left=pRoot->right;
        pRoot->right=temp;
        Mirror(pRoot->left);
        Mirror(pRoot->right);
    }
14 从上往下打印出二叉树的每个节点，同层节点从左至右打印。
vector<int> PrintFromTopToBottom(TreeNode* root) {
        if(!root) return {};
        queue<TreeNode *> q{{root}};
        vector<int> res;
        while(!q.empty()){
            for(int i=0;i<q.size();i++){
                TreeNode *t=q.front();
                res.push_back(t->val);
                q.pop();
                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);
            }
        }
        return res;
    }

15.输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)
vector<vector<int>> res;
    vector<int> out;
    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
        if(!root) return {};
        out.push_back(root->val);
        if(expectNumber==root->val&&!root->left&&!root->right){
            res.push_back(out);
        }
        FindPath(root->left,expectNumber-root->val);
        FindPath(root->right,expectNumber-root->val);
        if(out.size()!=0) out.pop_back();
        return res;
    }
16.数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
int MoreThanHalfNum_Solution(vector<int> numbers) {
        int flag=numbers[0];
        int cnt=1;
        for(int i=1;i<numbers.size();i++){
            cnt=numbers[i]==flag?cnt+1:cnt-1;
            if (cnt == 0) {
            flag = numbers[i];
            cnt = 1;
            }
        }
        cnt=0;
        for(auto i:numbers){
            if(i==flag)
                cnt++;
        }
        return cnt>numbers.size()/2?flag:0;
    }
17.输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。
vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        if(input.size()<k) return {};
        priority_queue<int, vector<int>, greater<int> > q;
        for(auto i:input){
            q.push(i);
        }
        vector<int> res;
        while((k--)!=0){
            int num=q.top();
            q.pop();
            res.push_back(num);
        }
        return res;
    }
18.在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.
int FirstNotRepeatingChar(string str) {
        int arr[100]={0};
        int res=-1;
        for(int i=0;i<str.size();i++){
            arr[str[i]-'A']++;
        }
        for(int i=0;i<str.size();i++)
        {
            if(arr[str[i]-'A']==1)
            {
                res=i;
                break;
            }
        }
        return res;
    }
19.输入两个链表，找出它们的第一个公共结点。
ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        ListNode *p1=pHead1;
        ListNode *p2=pHead2;
        while(p1!=p2){
            p1=(!p1?pHead1:p1->next);
            p2=(!p2?pHead2:p2->next);
        }
        return p2;
    }
20.输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。
 int TreeDepth(TreeNode* pRoot)
    {
        if(!pRoot) return 0;
        return 1+max(TreeDepth(pRoot->left),TreeDepth(pRoot->right));
    }

 第二种
 int  TreeDepth(TreeNode* root) {
         if(!root) return {};
         queue<TreeNode *> q{{root}};
         int res=0;
         while(!q.empty()){
            res++;
             for(int i=0;i<q.size();i++){
                 TreeNode *t=q.front();
                 q.pop();
                 if(t->left) q.push(t->left);
                 if(t->right) q.push(t->right);
             }
         }
         return res;
     }
21.输入一棵二叉树，判断该二叉树是否是平衡二叉树。
bool IsBalanced_Solution(TreeNode* pRoot) {
        if(!pRoot) return true;
        if(abs(getDepth(pRoot->left)-getDepth(pRoot->right))>1) return false;
        return IsBalanced_Solution(pRoot->left)&&IsBalanced_Solution(pRoot->right);

    }
    int getDepth(TreeNode* root){
        if(!root) return 0;
        return 1+max(getDepth(root->left),getDepth(root->right));
    }
22.给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8）    中，按结点数值大小顺序第三小结点的值为4
TreeNode* KthNode(TreeNode* pRoot, int k)
    {
        stack<TreeNode*> s;
        TreeNode* p=pRoot;
        int cnt=0;
        while(p||!s.empty()){
            while(p){
                s.push(p);
                p=p->left;
            }
            p=s.top();s.pop();
            cnt++;
            if(k==cnt) return p;
            p=p->right;
        }
        return 0;
    }
23.前序遍历
     vector<int> preorderTraversal(TreeNode* root){
        stack<TreeNode *> s;
        vector<int> res;
        TreeNode *p=root;
        while(p||!s.empty()){
            if(p){
                s.push(p)
                res.push_back(p->val);
                p=p->next
            }else{
                TreeNode *t=s.top();s.pop();
                p=t->right;
            }
        }
        return res;
     }
24.中序遍历
    vector<int> inorderTraversal(TreeNode* root){
            stack<TreeNode *> s;
            vector<int> res;
            TreeNode *p=root;
            while(p||!s.empty()){
                if(p){
                    s.push(p)

                    p=p->next
                }else{
                    TreeNode *t=s.top();s.pop();
                    res.push_back(p->val);
                    p=t->right;
                }
            }
            return res;
         }
25.后序遍历
    vector<int> postorderTraversal(TreeNode* root){
            stack<TreeNode *> s;
            vector<int> res;
            TreeNode *p=root;
            while(p||!s.empty()){
                if(p){
                    s.push(p)
                    res.insert(res.begin(),p->val);
                    p=p->next
                }else{
                    TreeNode *t=s.top();s.pop();
                    p=t->left;
                }
            }
            return res;
         }
26.请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。
vector<vector<int> > Print(TreeNode* pRoot) {
        if(!pRoot) return {};
        stack<TreeNode*> s1{{pRoot}};
        stack<TreeNode*> s2;
        vector<int> out;
        vector<vector<int>> res;
        while(!s1.empty()||!s2.empty()){
            while(!s1.empty()){
                TreeNode *t=s1.top();
                s1.pop();
                out.push_back(t->val);
                if(t->left) s2.push(t->left);
                if(t->right) s2.push(t->right);
            }
            if(!out.empty()) res.push_back(out);
            out.clear();
            while(!s2.empty()){
                TreeNode *t=s2.top();
                s2.pop();
                out.push_back(t->val);
                if(t->right) s1.push(t->right);
                if(t->left) s1.push(t->left);
            }
            if(!out.empty()) res.push_back(out);
            out.clear();
        }
        return res;
    }
27.在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5
ListNode* deleteDuplication(ListNode* p)
    {
           ListNode *head=new ListNode(-1);
            head->next=p;
           ListNode *cur=p;
           ListNode *last=p->next;
           while(last){
               if(last->next&&last->val==last->next->val){
                   while(last->next&& last->val == last->next->val){
                       last=last->next;
                   }
                   cur->next=last->next;
                   last=last->next;
               }else{
                   cur=cur->next;
                   last=last->next;
               }
           }
            return head->next;
    }
28.快速排序
int p(vector<int>& arr, int l, int r) {
	int left = l, right = r;
	int temp = arr[l];
	while (l < r) {
		while (l < r && arr[r] >= temp) {
			r--;
		}
		while (l < r && arr[l] <= temp) {
			l++;
		}
		if (l < r) swap(arr[l], arr[r]);
	}
	arr[left] = arr[l];
	arr[l] = temp;
	return l;
}
void quick(vector<int>& arr, int l, int r) {
	int position = p(arr, l, r);
	if (position > l + 1) {
		quick(arr, l, position - 1);
	}
	if (position < r - 1) {
		quick(arr, position + 1, r);
	}
}
最优log n 最差n^2
29.冒泡排序
void bubble(vector<int>& arr) {
	for (int i = 0; i < arr.size(); i++) {
		for (int j = 0; j <arr.size()-i-1; j++) {
			if (arr[j] > arr[j + 1]) {
				swap(arr[j], arr[j + 1]);
			}
		}
	}
}

n^2
30.插入排序
void insert(vector<int>& arr) {
	int k, j,i;
	for (i = 1; i < arr.size(); i++) {
		for (j = i - 1; j >= 0;j--) {
			if (arr[i] > arr[j]) {
				break;
			}
		}
		int temp = arr[i];
		for (k = i - 1; k > j; k--) {
			arr[k + 1] = arr[k];
		}
		arr[k + 1] = temp;

	}
}

n^2

31.选择排序
void select(vector<int>& arr) {
	for (int i = 0; i < arr.size(); i++) {
		int min = i;
		for (int j = i+1; j < arr.size(); j++) {
			if (arr[j] < arr[min]) {
				min = j;
			}
		}
		swap(arr[min], arr[i]);
	}
}

32，堆排
void adjustHeap(vector<int> &arr, int i,int l) {
	int temp = arr[i];
	for (int k = 2 * i + 1; k < l; k = 2 * k + 1) {
		if (k + 1 < l && arr[k] < arr[k + 1]) k++;
		if (arr[k] > temp) {
			swap(arr[i], arr[k]);
			i = k;
		}
		else {
			break;
		}
	}
}
void dui(vector<int> &arr) {
	for (int i = arr.size() / 2 - 1; i >= 0; i--) {
		adjustHeap(arr, i, arr.size());
	}
	for (int j = arr.size()-1; j > 0; j--) {
		swap(arr[0], arr[j]);
		adjustHeap(arr, 0, j);
	}
}

33.我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
int rectCover(int number) {
        if(number==0) return 0;
        if(number==1||number==2) return number;
        return rectCover(number-1)+rectCover(number-2);
    }
34.输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
int  NumberOf1(int n) {
         int count = 0;
        while(n!= 0){
            count++;
            n = n & (n - 1);
         }
        return count;
     }
35.输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
void reOrderArray(vector<int> &array) {
        for(int i = 0;i < array.size();i++){
            for(int j = array.size()-1; j>i;j--){
                if(array[j]%2==1&&array[j-1]%2==0)
                    swap(array[j],array[j-1]);
            }
        }
    }
36.输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
  if(matrix.empty()||matrix[0].empty()) return {};
        int m=matrix.size(),n=matrix[0].size();
        vector<int> res;
        int up=0,down=m-1,left=0,right=n-1;
        while(true){
            for(int i=left;i<=right;i++) res.push_back(matrix[up][i]);
            if(++up>down) break;
            for(int i=up;i<=down;i++) res.push_back(matrix[i][right]);
            if(--right<left) break;
            for(int i=right;i<=left;i--) res.push_back(matrix[down][i]);
            if(++down<up) break;
            for(int i=down;i<=up;i++) res.push_back(matrix[i][left]);
            if(++left>right) break;
        }
        return res;
    }
37.输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
bool VerifySquenceOfBST(vector<int> sequence) {
        int size = sequence.size();
        if(0==size)return false;

        int i = 0;
        while(--size)
        {
            while(sequence[i++]<sequence[size]);
            while(sequence[i++]>sequence[size]);

            if(i<size)return false;
            i=0;
        }
        return true;
    }
38.输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
    bool VerifySquenceOfBST(vector<int> sequence) {
        int size=sequence.size();
        if(size==0) return false;
        return help(sequence,0,sequence.size()-1);
    }
    bool help(vector<int> s,int l,int r){
        if(l==r) return true;
        int mid=l;
        while(s[mid++]<s[r]&&mid<r);
        int tmp=mid;
        while(s[tmp++]>s[r]&&tmp<r);
        if(tmp<r) return false;
        if(mid==l||mid==r){
            return help(s,l,r-1);
        }else{
            return help(s,l,mid-1)&&help(s,mid,r-1);
        }
    }
39.输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。
void help(string str, int level, string out, vector<string>& res,vector<int> &visited) {
	if (level == str.size()) {
		int flag = false;
		for (int i = 0; i < res.size(); i++) {
			if (res[i] == out) flag = true;
		}
		if (!flag) res.push_back(out);
		return;
	}
	for (int i = 0; i < str.size(); i++) {
		if (visited[i] == 1) continue;
		visited[i] = 1;
		help(str, level + 1, out + str[i], res,visited);
		visited[i] = 0;
	}
}
vector<string> Permutation(string str) {
	vector<int>  visted(str.size(), 0);
	if (str.empty()) return {};
	vector<string> res;
	help(str, 0, "", res,visted);
	return res;
}
40.HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)
int FindGreatestSumOfSubArray(vector<int> array) {
        int res = array[0]; //记录当前所有子数组的和的最大值
        int Max=array[0];   //包含array[i]的连续数组最大值
        for (int i = 1; i < array.size(); i++) {
            Max=max(Max+array[i], array[i]);
            res=max(Max, res);
        }
        return res;
    }
n^2
不稳定
选择
希尔
快排
堆排

